// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: abac.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ABACService_Auth_FullMethodName   = "/begonia.org.go.access.control.api.v1.ABACService/Auth"
	ABACService_Put_FullMethodName    = "/begonia.org.go.access.control.api.v1.ABACService/Put"
	ABACService_Patch_FullMethodName  = "/begonia.org.go.access.control.api.v1.ABACService/Patch"
	ABACService_Delete_FullMethodName = "/begonia.org.go.access.control.api.v1.ABACService/Delete"
	ABACService_Get_FullMethodName    = "/begonia.org.go.access.control.api.v1.ABACService/Get"
	ABACService_List_FullMethodName   = "/begonia.org.go.access.control.api.v1.ABACService/List"
)

// ABACServiceClient is the client API for ABACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ABACServiceClient interface {
	Auth(ctx context.Context, in *AccessContext, opts ...grpc.CallOption) (*AccessResponse, error)
	Put(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	Patch(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	Delete(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	Get(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	List(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
}

type aBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewABACServiceClient(cc grpc.ClientConnInterface) ABACServiceClient {
	return &aBACServiceClient{cc}
}

func (c *aBACServiceClient) Auth(ctx context.Context, in *AccessContext, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, ABACService_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBACServiceClient) Put(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, ABACService_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBACServiceClient) Patch(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, ABACService_Patch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBACServiceClient) Delete(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, ABACService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBACServiceClient) Get(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, ABACService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBACServiceClient) List(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, ABACService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABACServiceServer is the server API for ABACService service.
// All implementations must embed UnimplementedABACServiceServer
// for forward compatibility
type ABACServiceServer interface {
	Auth(context.Context, *AccessContext) (*AccessResponse, error)
	Put(context.Context, *Policy) (*Policy, error)
	Patch(context.Context, *Policy) (*Policy, error)
	Delete(context.Context, *PolicyRequest) (*Policy, error)
	Get(context.Context, *PolicyRequest) (*Policy, error)
	List(context.Context, *Policy) (*Policy, error)
	mustEmbedUnimplementedABACServiceServer()
}

// UnimplementedABACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedABACServiceServer struct {
}

func (UnimplementedABACServiceServer) Auth(context.Context, *AccessContext) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedABACServiceServer) Put(context.Context, *Policy) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedABACServiceServer) Patch(context.Context, *Policy) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedABACServiceServer) Delete(context.Context, *PolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedABACServiceServer) Get(context.Context, *PolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedABACServiceServer) List(context.Context, *Policy) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedABACServiceServer) mustEmbedUnimplementedABACServiceServer() {}

// UnsafeABACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ABACServiceServer will
// result in compilation errors.
type UnsafeABACServiceServer interface {
	mustEmbedUnimplementedABACServiceServer()
}

func RegisterABACServiceServer(s grpc.ServiceRegistrar, srv ABACServiceServer) {
	s.RegisterService(&ABACService_ServiceDesc, srv)
}

func _ABACService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABACServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ABACService_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABACServiceServer).Auth(ctx, req.(*AccessContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABACService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABACServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ABACService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABACServiceServer).Put(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABACService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABACServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ABACService_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABACServiceServer).Patch(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABACService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABACServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ABACService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABACServiceServer).Delete(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABACService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABACServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ABACService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABACServiceServer).Get(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABACService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABACServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ABACService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABACServiceServer).List(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

// ABACService_ServiceDesc is the grpc.ServiceDesc for ABACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ABACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "begonia.org.go.access.control.api.v1.ABACService",
	HandlerType: (*ABACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _ABACService_Auth_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ABACService_Put_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _ABACService_Patch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ABACService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ABACService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ABACService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abac.proto",
}
