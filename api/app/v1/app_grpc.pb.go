// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppsService_Put_FullMethodName    = "/begonia.org.sdk.AppsService/Put"
	AppsService_Patch_FullMethodName  = "/begonia.org.sdk.AppsService/Patch"
	AppsService_Get_FullMethodName    = "/begonia.org.sdk.AppsService/Get"
	AppsService_Delete_FullMethodName = "/begonia.org.sdk.AppsService/Delete"
	AppsService_List_FullMethodName   = "/begonia.org.sdk.AppsService/List"
)

// AppsServiceClient is the client API for AppsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsServiceClient interface {
	// @gotags: doc:"添加app服务"
	Put(ctx context.Context, in *AppsRequest, opts ...grpc.CallOption) (*AddAppResponse, error)
	Patch(ctx context.Context, in *AppsRequest, opts ...grpc.CallOption) (*Apps, error)
	// @gotags: doc:"获取app服务"
	Get(ctx context.Context, in *GetAPPRequest, opts ...grpc.CallOption) (*Apps, error)
	Delete(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
	List(ctx context.Context, in *AppsListRequest, opts ...grpc.CallOption) (*AppsListResponse, error)
}

type appsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsServiceClient(cc grpc.ClientConnInterface) AppsServiceClient {
	return &appsServiceClient{cc}
}

func (c *appsServiceClient) Put(ctx context.Context, in *AppsRequest, opts ...grpc.CallOption) (*AddAppResponse, error) {
	out := new(AddAppResponse)
	err := c.cc.Invoke(ctx, AppsService_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Patch(ctx context.Context, in *AppsRequest, opts ...grpc.CallOption) (*Apps, error) {
	out := new(Apps)
	err := c.cc.Invoke(ctx, AppsService_Patch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Get(ctx context.Context, in *GetAPPRequest, opts ...grpc.CallOption) (*Apps, error) {
	out := new(Apps)
	err := c.cc.Invoke(ctx, AppsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) Delete(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, AppsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsServiceClient) List(ctx context.Context, in *AppsListRequest, opts ...grpc.CallOption) (*AppsListResponse, error) {
	out := new(AppsListResponse)
	err := c.cc.Invoke(ctx, AppsService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsServiceServer is the server API for AppsService service.
// All implementations must embed UnimplementedAppsServiceServer
// for forward compatibility
type AppsServiceServer interface {
	// @gotags: doc:"添加app服务"
	Put(context.Context, *AppsRequest) (*AddAppResponse, error)
	Patch(context.Context, *AppsRequest) (*Apps, error)
	// @gotags: doc:"获取app服务"
	Get(context.Context, *GetAPPRequest) (*Apps, error)
	Delete(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	List(context.Context, *AppsListRequest) (*AppsListResponse, error)
	mustEmbedUnimplementedAppsServiceServer()
}

// UnimplementedAppsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppsServiceServer struct {
}

func (UnimplementedAppsServiceServer) Put(context.Context, *AppsRequest) (*AddAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedAppsServiceServer) Patch(context.Context, *AppsRequest) (*Apps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedAppsServiceServer) Get(context.Context, *GetAPPRequest) (*Apps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppsServiceServer) Delete(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppsServiceServer) List(context.Context, *AppsListRequest) (*AppsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppsServiceServer) mustEmbedUnimplementedAppsServiceServer() {}

// UnsafeAppsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsServiceServer will
// result in compilation errors.
type UnsafeAppsServiceServer interface {
	mustEmbedUnimplementedAppsServiceServer()
}

func RegisterAppsServiceServer(s grpc.ServiceRegistrar, srv AppsServiceServer) {
	s.RegisterService(&AppsService_ServiceDesc, srv)
}

func _AppsService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Put(ctx, req.(*AppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Patch(ctx, req.(*AppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Get(ctx, req.(*GetAPPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).Delete(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServiceServer).List(ctx, req.(*AppsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppsService_ServiceDesc is the grpc.ServiceDesc for AppsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "begonia.org.sdk.AppsService",
	HandlerType: (*AppsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _AppsService_Put_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _AppsService_Patch_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppsService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AppsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
