// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.2
// source: user.proto

package v1

import (
	_ "github.com/begonia-org/go-sdk/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_ADMIN Role = 0
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ADMIN",
	}
	Role_value = map[string]int32{
		"ADMIN": 0,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

type USER_STATUS int32

const (
	USER_STATUS_ACTIVE   USER_STATUS = 0
	USER_STATUS_INACTIVE USER_STATUS = 1
	USER_STATUS_LOCKED   USER_STATUS = 2
	USER_STATUS_DELETED  USER_STATUS = 3
)

// Enum value maps for USER_STATUS.
var (
	USER_STATUS_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
		2: "LOCKED",
		3: "DELETED",
	}
	USER_STATUS_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
		"LOCKED":   2,
		"DELETED":  3,
	}
)

func (x USER_STATUS) Enum() *USER_STATUS {
	p := new(USER_STATUS)
	*p = x
	return p
}

func (x USER_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[1].Descriptor()
}

func (USER_STATUS) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[1]
}

func (x USER_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_STATUS.Descriptor instead.
func (USER_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

type UserSvrCode int32

const (
	UserSvrCode_USER_UNKNOWN          UserSvrCode = 0
	UserSvrCode_USER_LOGIN_ERR        UserSvrCode = 4107
	UserSvrCode_USER_TOKEN_EXPIRE_ERR UserSvrCode = 4108
	UserSvrCode_USER_DISABLED_ERR     UserSvrCode = 4119
	// 非法的token
	UserSvrCode_USER_TOKEN_INVALIDATE_ERR   UserSvrCode = 4109
	UserSvrCode_USER_TOKEN_NOT_ACTIVTE_ERR  UserSvrCode = 4114
	UserSvrCode_USER_AUTH_DECRYPT_ERR       UserSvrCode = 4110
	UserSvrCode_USER_ACCOUNT_ERR            UserSvrCode = 4111
	UserSvrCode_USER_PASSWORD_ERR           UserSvrCode = 4112
	UserSvrCode_USER_NOT_FOUND_ERR          UserSvrCode = 4113
	UserSvrCode_USER_AUTH_MISSING_ERR       UserSvrCode = 4115
	UserSvrCode_USER_IDENTITY_MISSING_ERR   UserSvrCode = 4116
	UserSvrCode_USER_APIKEY_NOT_MATCH_ERR   UserSvrCode = 4117
	UserSvrCode_USER_USERNAME_DUPLICATE_ERR UserSvrCode = 4118
)

// Enum value maps for UserSvrCode.
var (
	UserSvrCode_name = map[int32]string{
		0:    "USER_UNKNOWN",
		4107: "USER_LOGIN_ERR",
		4108: "USER_TOKEN_EXPIRE_ERR",
		4119: "USER_DISABLED_ERR",
		4109: "USER_TOKEN_INVALIDATE_ERR",
		4114: "USER_TOKEN_NOT_ACTIVTE_ERR",
		4110: "USER_AUTH_DECRYPT_ERR",
		4111: "USER_ACCOUNT_ERR",
		4112: "USER_PASSWORD_ERR",
		4113: "USER_NOT_FOUND_ERR",
		4115: "USER_AUTH_MISSING_ERR",
		4116: "USER_IDENTITY_MISSING_ERR",
		4117: "USER_APIKEY_NOT_MATCH_ERR",
		4118: "USER_USERNAME_DUPLICATE_ERR",
	}
	UserSvrCode_value = map[string]int32{
		"USER_UNKNOWN":                0,
		"USER_LOGIN_ERR":              4107,
		"USER_TOKEN_EXPIRE_ERR":       4108,
		"USER_DISABLED_ERR":           4119,
		"USER_TOKEN_INVALIDATE_ERR":   4109,
		"USER_TOKEN_NOT_ACTIVTE_ERR":  4114,
		"USER_AUTH_DECRYPT_ERR":       4110,
		"USER_ACCOUNT_ERR":            4111,
		"USER_PASSWORD_ERR":           4112,
		"USER_NOT_FOUND_ERR":          4113,
		"USER_AUTH_MISSING_ERR":       4115,
		"USER_IDENTITY_MISSING_ERR":   4116,
		"USER_APIKEY_NOT_MATCH_ERR":   4117,
		"USER_USERNAME_DUPLICATE_ERR": 4118,
	}
)

func (x UserSvrCode) Enum() *UserSvrCode {
	p := new(UserSvrCode)
	*p = x
	return p
}

func (x UserSvrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSvrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[2].Descriptor()
}

func (UserSvrCode) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[2]
}

func (x UserSvrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSvrCode.Descriptor instead.
func (UserSvrCode) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: gorm:"primaryKey;autoIncrement;comment:自增id"
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" gorm:"primaryKey;autoIncrement;comment:自增id"`
	// @gotags: json:"uid"  primary:"uid" gorm:"column:uid;type:varchar(36);not null;unique;comment:uid"
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid" primary:"uid" gorm:"column:uid;type:varchar(36);not null;unique;comment:uid"`
	// @gotags: json:"group" owner:"owner" gorm:"column:group;type:varchar(36);comment:group"
	Owner string `protobuf:"bytes,13,opt,name=owner,proto3" json:"group" owner:"owner" gorm:"column:group;type:varchar(36);comment:group"`
	// @gotags: json:"dept" gorm:"column:dept;type:varchar(36);comment:部门"
	Dept string `protobuf:"bytes,14,opt,name=dept,proto3" json:"dept" gorm:"column:dept;type:varchar(36);comment:部门"`
	// @gotags: json:"name" ondeleted:"rename" gorm:"column:name;type:varchar(128);not null;unique;comment:username" aes:"true"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" ondeleted:"rename" gorm:"column:name;type:varchar(128);not null;unique;comment:username" aes:"true"`
	// @gotags: json:"email" ondeleted:"rename" gorm:"column:email;type:varchar(128);not null;unique;comment:Users Email" aes:"true"
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email" ondeleted:"rename" gorm:"column:email;type:varchar(128);not null;unique;comment:Users Email" aes:"true"`
	// @gotags: doc:"phone number" ondeleted:"rename" gorm:"type:varchar(128);not null;unique;comment:Users Phone Number" aes:"true"
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty" doc:"phone number" ondeleted:"rename" gorm:"type:varchar(128);not null;unique;comment:Users Phone Number" aes:"true"`
	// @gotags: doc:"account password" gorm:"type:varchar(128);comment:Users account password" aes:"true"
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty" doc:"account password" gorm:"type:varchar(128);comment:Users account password" aes:"true"`
	// @gotags: doc:"account avatar" gorm:"type:varchar(512);comment:Users account avatar"
	Avatar string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty" doc:"account avatar" gorm:"type:varchar(512);comment:Users account avatar"`
	// @gotags: doc:"account role" gorm:"comment:Users account Role"
	Role Role `protobuf:"varint,8,opt,name=role,proto3,enum=begonia.org.sdk.Role" json:"role,omitempty" doc:"account role" gorm:"comment:Users account Role"`
	// @gotags: doc:"account status" gorm:"comment:Users account status"
	Status USER_STATUS `protobuf:"varint,9,opt,name=status,proto3,enum=begonia.org.sdk.USER_STATUS" json:"status,omitempty" doc:"account status" gorm:"comment:Users account status"`
	// @gotags: json:"tenant_id" gorm:"column:tenant_id;type:varchar(36);not null;comment:tenant_id"
	TenantId string `protobuf:"bytes,15,opt,name=tenant_id,proto3" json:"tenant_id" gorm:"column:tenant_id;type:varchar(36);not null;comment:tenant_id"`
	// @gotags: json:"is_deleted" gorm:"column:is_deleted;type:tinyint;comment:proto服务是否删除"
	IsDeleted bool `protobuf:"varint,12,opt,name=is_deleted,proto3" json:"is_deleted" gorm:"column:is_deleted;type:tinyint;comment:proto服务是否删除"`
	// @gotags: doc:"完成时间" gorm:"column:created_at;type:datetime;serializer:timepb;comment:定时任务的最近一次完成时间"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,proto3" json:"created_at,omitempty" doc:"完成时间" gorm:"column:created_at;type:datetime;serializer:timepb;comment:定时任务的最近一次完成时间"`
	// @gotags: doc:"更新时间" gorm:"column:updated_at;type:datetime;serializer:timepb;comment:定时任务的更新时间"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,proto3" json:"updated_at,omitempty" doc:"更新时间" gorm:"column:updated_at;type:datetime;serializer:timepb;comment:定时任务的更新时间"`
	// @gotags: gorm:"-" json:"-"
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,18,opt,name=update_mask,proto3" json:"-" gorm:"-"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *Users) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Users) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Users) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Users) GetDept() string {
	if x != nil {
		return x.Dept
	}
	return ""
}

func (x *Users) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Users) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Users) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Users) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Users) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Users) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ADMIN
}

func (x *Users) GetStatus() USER_STATUS {
	if x != nil {
		return x.Status
	}
	return USER_STATUS_ACTIVE
}

func (x *Users) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Users) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Users) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Users) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Users) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role        Role   `protobuf:"varint,3,opt,name=role,proto3,enum=begonia.org.sdk.Role" json:"role,omitempty"`
	Audience    string `protobuf:"bytes,4,opt,name=audience,proto3" json:"audience,omitempty"`
	Issuer      string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	NotBefore   int64  `protobuf:"varint,6,opt,name=not_before,json=nbf,proto3" json:"not_before,omitempty"`
	Expiration  int64  `protobuf:"varint,7,opt,name=expiration,json=exp,proto3" json:"expiration,omitempty"`
	IssuedAt    int64  `protobuf:"varint,8,opt,name=issued_at,json=iat,proto3" json:"issued_at,omitempty"`
	IsKeepLogin bool   `protobuf:"varint,9,opt,name=is_keep_login,proto3" json:"is_keep_login,omitempty"`
	Token       string `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BasicAuth) Reset() {
	*x = BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuth) ProtoMessage() {}

func (x *BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuth.ProtoReflect.Descriptor instead.
func (*BasicAuth) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *BasicAuth) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BasicAuth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BasicAuth) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ADMIN
}

func (x *BasicAuth) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *BasicAuth) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *BasicAuth) GetNotBefore() int64 {
	if x != nil {
		return x.NotBefore
	}
	return 0
}

func (x *BasicAuth) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *BasicAuth) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *BasicAuth) GetIsKeepLogin() bool {
	if x != nil {
		return x.IsKeepLogin
	}
	return false
}

func (x *BasicAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PostUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password string      `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email    string      `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone    string      `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Role     Role        `protobuf:"varint,5,opt,name=role,proto3,enum=begonia.org.sdk.Role" json:"role,omitempty"`
	Status   USER_STATUS `protobuf:"varint,6,opt,name=status,proto3,enum=begonia.org.sdk.USER_STATUS" json:"status,omitempty"`
	Dept     string      `protobuf:"bytes,7,opt,name=dept,proto3" json:"dept,omitempty"`
	Owner    string      `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	// @gotags: doc:"account avatar" gorm:"type:varchar(512);comment:Users account avatar"
	Avatar string `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty" doc:"account avatar" gorm:"type:varchar(512);comment:Users account avatar"`
	// @gotags: validate:"required"
	TenantId string `protobuf:"bytes,10,opt,name=tenant_id,proto3" json:"tenant_id,omitempty" validate:"required"`
	// @gotags: gorm:"-" json:"-"
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,18,opt,name=update_mask,json=updateMask,proto3" json:"-" gorm:"-"`
}

func (x *PostUserRequest) Reset() {
	*x = PostUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUserRequest) ProtoMessage() {}

func (x *PostUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUserRequest.ProtoReflect.Descriptor instead.
func (*PostUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *PostUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PostUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PostUserRequest) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ADMIN
}

func (x *PostUserRequest) GetStatus() USER_STATUS {
	if x != nil {
		return x.Status
	}
	return USER_STATUS_ACTIVE
}

func (x *PostUserRequest) GetDept() string {
	if x != nil {
		return x.Dept
	}
	return ""
}

func (x *PostUserRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PostUserRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *PostUserRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PostUserRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteUserRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteUserResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type PatchUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password string      `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Email    string      `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone    string      `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Role     Role        `protobuf:"varint,6,opt,name=role,proto3,enum=begonia.org.sdk.Role" json:"role,omitempty"`
	Status   USER_STATUS `protobuf:"varint,7,opt,name=status,proto3,enum=begonia.org.sdk.USER_STATUS" json:"status,omitempty"`
	Dept     string      `protobuf:"bytes,8,opt,name=dept,proto3" json:"dept,omitempty"`
	Owner    string      `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	// @gotags: doc:"account avatar" gorm:"type:varchar(512);comment:Users account avatar"
	Avatar string `protobuf:"bytes,10,opt,name=avatar,proto3" json:"avatar,omitempty" doc:"account avatar" gorm:"type:varchar(512);comment:Users account avatar"`
	// @gotags: gorm:"-" json:"-"
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,18,opt,name=update_mask,json=updateMask,proto3" json:"-" gorm:"-"`
}

func (x *PatchUserRequest) Reset() {
	*x = PatchUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchUserRequest) ProtoMessage() {}

func (x *PatchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchUserRequest.ProtoReflect.Descriptor instead.
func (*PatchUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *PatchUserRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PatchUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PatchUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PatchUserRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PatchUserRequest) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ADMIN
}

func (x *PatchUserRequest) GetStatus() USER_STATUS {
	if x != nil {
		return x.Status
	}
	return USER_STATUS_ACTIVE
}

func (x *PatchUserRequest) GetDept() string {
	if x != nil {
		return x.Dept
	}
	return ""
}

func (x *PatchUserRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PatchUserRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *PatchUserRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x65,
	0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x04, 0x0a,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x96, 0x02, 0x0a, 0x09,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x62, 0x66, 0x12, 0x17, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x16, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xeb, 0x02, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x26, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xb8, 0xb7, 0x18, 0x01, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x67, 0x6f,
	0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x2a, 0x11,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x2a, 0x40, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xc8, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x76, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8b, 0x20, 0x1a, 0x0e, 0xa2, 0xb7, 0x18, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x8c, 0x20, 0x1a, 0x10, 0xa2, 0xb7, 0x18, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x97, 0x20,
	0x1a, 0x11, 0xa2, 0xb7, 0x18, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x8d, 0x20, 0x1a, 0x14, 0xa2, 0xb7, 0x18, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x1a, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x92, 0x20, 0x1a, 0x14, 0xa2, 0xb7, 0x18, 0x10,
	0x69, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x30, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x44, 0x45,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8e, 0x20, 0x1a, 0x14, 0xa2, 0xb7,
	0x18, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x35, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8f, 0x20, 0x1a, 0x1e, 0xa2, 0xb7, 0x18, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x11, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x90,
	0x20, 0x1a, 0x1e, 0xa2, 0xb7, 0x18, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x37, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x91, 0x20, 0x1a, 0x1e, 0xa2, 0xb7, 0x18, 0x1a,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x93, 0x20, 0x1a, 0x20, 0xa2, 0xb7, 0x18, 0x1c, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x94, 0x20, 0x1a, 0x14, 0xa2, 0xb7, 0x18, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x95, 0x20, 0x1a, 0x14,
	0xa2, 0xb7, 0x18, 0x10, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x96, 0x20, 0x1a, 0x16, 0xa2, 0xb7, 0x18, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x32, 0xc4,
	0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e,
	0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x62, 0x65, 0x67,
	0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62,
	0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x63,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x65, 0x67, 0x6f, 0x6e,
	0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x65,
	0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x69, 0x64, 0x7d, 0x12, 0x5b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x65, 0x67,
	0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x65,
	0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x69, 0x64, 0x7d,
	0x12, 0x6e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x62, 0x65, 0x67,
	0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x69, 0x64, 0x7d,
	0x1a, 0x23, 0x88, 0xb7, 0x18, 0x01, 0xb2, 0xb7, 0x18, 0x1b, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x67, 0x6f, 0x6e, 0x69, 0x61, 0x2d, 0x6f, 0x72, 0x67, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_user_proto_goTypes = []interface{}{
	(Role)(0),                     // 0: begonia.org.sdk.Role
	(USER_STATUS)(0),              // 1: begonia.org.sdk.USER_STATUS
	(UserSvrCode)(0),              // 2: begonia.org.sdk.UserSvrCode
	(*Users)(nil),                 // 3: begonia.org.sdk.Users
	(*BasicAuth)(nil),             // 4: begonia.org.sdk.BasicAuth
	(*PostUserRequest)(nil),       // 5: begonia.org.sdk.PostUserRequest
	(*GetUserRequest)(nil),        // 6: begonia.org.sdk.GetUserRequest
	(*DeleteUserRequest)(nil),     // 7: begonia.org.sdk.DeleteUserRequest
	(*DeleteUserResponse)(nil),    // 8: begonia.org.sdk.DeleteUserResponse
	(*PatchUserRequest)(nil),      // 9: begonia.org.sdk.PatchUserRequest
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil), // 11: google.protobuf.FieldMask
}
var file_user_proto_depIdxs = []int32{
	0,  // 0: begonia.org.sdk.Users.role:type_name -> begonia.org.sdk.Role
	1,  // 1: begonia.org.sdk.Users.status:type_name -> begonia.org.sdk.USER_STATUS
	10, // 2: begonia.org.sdk.Users.created_at:type_name -> google.protobuf.Timestamp
	10, // 3: begonia.org.sdk.Users.updated_at:type_name -> google.protobuf.Timestamp
	11, // 4: begonia.org.sdk.Users.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 5: begonia.org.sdk.BasicAuth.role:type_name -> begonia.org.sdk.Role
	0,  // 6: begonia.org.sdk.PostUserRequest.role:type_name -> begonia.org.sdk.Role
	1,  // 7: begonia.org.sdk.PostUserRequest.status:type_name -> begonia.org.sdk.USER_STATUS
	11, // 8: begonia.org.sdk.PostUserRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 9: begonia.org.sdk.PatchUserRequest.role:type_name -> begonia.org.sdk.Role
	1,  // 10: begonia.org.sdk.PatchUserRequest.status:type_name -> begonia.org.sdk.USER_STATUS
	11, // 11: begonia.org.sdk.PatchUserRequest.update_mask:type_name -> google.protobuf.FieldMask
	5,  // 12: begonia.org.sdk.UserService.Register:input_type -> begonia.org.sdk.PostUserRequest
	9,  // 13: begonia.org.sdk.UserService.Update:input_type -> begonia.org.sdk.PatchUserRequest
	6,  // 14: begonia.org.sdk.UserService.Get:input_type -> begonia.org.sdk.GetUserRequest
	7,  // 15: begonia.org.sdk.UserService.Delete:input_type -> begonia.org.sdk.DeleteUserRequest
	3,  // 16: begonia.org.sdk.UserService.Register:output_type -> begonia.org.sdk.Users
	3,  // 17: begonia.org.sdk.UserService.Update:output_type -> begonia.org.sdk.Users
	3,  // 18: begonia.org.sdk.UserService.Get:output_type -> begonia.org.sdk.Users
	8,  // 19: begonia.org.sdk.UserService.Delete:output_type -> begonia.org.sdk.DeleteUserResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		EnumInfos:         file_user_proto_enumTypes,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
